{
	"info": {
		"_postman_id": "ddf00057-c099-47d9-a929-951682563cdd",
		"name": "MiniFaaS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30183726"
	},
	"item": [
		{
			"name": "createTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"taskId\", jsonData.data);\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data field should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that taskId is set and is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(pm.environment.get(\"taskId\")).to.be.a('string').and.to.have.lengthOf.at.least(1, \"taskId should be a non-empty string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://accounts.google.com/o/oauth2/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "redirect_uri",
							"value": "http://localhost:4180/oauth2/callback",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "",
							"type": "string"
						},
						{
							"key": "accessToken",
							"type": "any"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "email",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "state",
							"value": "",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "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",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "936638621086-ukfhb28p7pkbjup42pgvjq4br9ce0h86.apps.googleusercontent.com",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "myToken",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"url\" :  \"https://github.com/vlopser/test1.git\",\r\n    \"parameters\" : [\"1\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{hostname}}:4180/createTask",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"createTask"
					]
				}
			},
			"response": []
		},
		{
			"name": "getResult",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:4180/getTaskResult?taskId={{taskId}}",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"getTaskResult"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{taskId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getSystemStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - data, number_of_workers, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData).to.have.property('number_of_workers');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Number_of_workers is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.number_of_workers).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:4180/getSystemStatus",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"getSystemStatus"
					]
				}
			},
			"response": []
		},
		{
			"name": "getTaskStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required content type - application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data field is present in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('data');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data field should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data field should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:4180/getTaskStatus?taskId={{taskId}}",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"getTaskStatus"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{taskId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllTasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array elements are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(element) {\r",
							"        pm.expect(element).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{hostname}}:4180/getAllTasks",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"getAllTasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "injectFile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "_oauth2_proxy={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1eebd339-c0ca-4440-a59d-678d3e12baa8"
						}
					]
				},
				"url": {
					"raw": "http://{{hostname}}:4180/injectFile",
					"protocol": "http",
					"host": [
						"{{hostname}}"
					],
					"port": "4180",
					"path": [
						"injectFile"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "hostname",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "token",
			"value": "KSRvIxmVs8lMNaWDTegJYJ0rnXPmzfRBVxuMoXws6dMsnpkhRTxH3V1jxB8aqLkbhQg_vL3tT7nnkANrhuFrB4d9zOblrXPsCiRLGJgevakQqaNBgy6XvyazP-IdkwrE14utdhzfeY_GdXafN10tadRSdBFI_TV7EOcTy6xYWVzIyEspGCWUrw5kTMUGOZeGdS0-6RUG8jQdZn2bGVS7DM9SXhdeYDwPjAz5wpiIXY0sQ4N9KPp3Tza_4Sz0613Ihy6dOq842wfZHQ5NY1jksqJgsXNR04FvapBGHTHwRkEACBLfdtYIrPnzrgupVthlaB0vWsAarQlYLXU8YanACyf_0MtImP946IHWhI4qOIN9XxOl4XOYwbnHKz7o5AJdrQcYcKnVe4YSo6o4I1jvUESROUb36FFG8qfXpxZwSvD2BoO5r4xcqVTC3QmPD4FmiStEuZgMUMpbD8XRyrTv376RDsUdsJDslsqkNeUPx34ZTNqaIXemML8TCuP76EElxmgb6wZhQSYsvvpl1Tyk5nR_9vJtDiVu-1HhZ4qj1OQ_KrXFKD7Jxy7wqjLiSq8bqsOTIBOx4PDNDNJNKF_oYY7tQOH1IQNdA8OAqC1KXFlHv5PH-JhrSrgOdYDbi1Lj1fw56isL8v3iugeqjqbV8ag9cowCvoOSU5D9egJ516ZwAmxhsa8-rq6W8nwMHPxlYAW6cfLrAmRdCBPIiUyl-syMUcC0wK4g4Uyz1d0mEeLdm3RvPTust3fzoxGhigPkFiW4S96Ek79Tgh7Ul_q98hDm7twOpHOibImG5_JXD0LW6Jf9_pJXmXjEUddB4Ac5D0fKE4cok9cGqFCWGdhkupi-HUD6UOntDFty7Ci47FBdD0vrzfcvFqLvUqXXmrqJEn_QhntuYobb3hjTdx-0S3u_orH3IOSrPtiqMuc5CsJSk0FWawsxOi0tnFWFnryYZcP_RUE6JK-V46Jo07pLtzdpDNyiAYbo9kOgMiSEm3kho7SLi3jd_9IAY2ZZWU-P87jfpfVMCy8dRBLaTzchOZFXNWKPesSVF4PmcvccIiT2qdh7Dm9uJ6F5cBLICcxYa1Ac7ZOz1wbIUoyUKvOVxcky0pJnKDtxIoy0bA3E1gv7RZRmB1pLfs4JljY0TJ08i-IHKq-alGsjkAjJDA_P6xCCoOj2ixgSYO_aocqNd37gl-RLB1iYF-bLiTmtE29la7GbyuXdRF97dCxPEuxs1vE6o65P_NkDr1922vv0zK3wuPTnOdeO5q3TdWNRe-qGZal_6g-YFErlHHgAcyFVn0QeMzENJ_FrReQcdAlq5UPmqvgB9stkXLoN41v3oyjbeioCFWEaqT0KRH8tcZjs0XBRln1hD9m7xELvGHtjMoyW2D0tII9zCjXnrzDPEEh5cqfGcGebVPjYkSs8mJ0WONyCut1n_n-qU3wGyxgxsiv33mLJ4BZd9sg0govuJV7UTdSXkd1FJO8_sKs9Pg--Ij69XmXC8KBWsgb7rTUi6sB-BGoP7KchiWUIcRYr9J7IKVZag3142sprbJKZV9G1-nYDyyxP8yyJ1sBO6nQsymYVBHy0hArLM5fkusRKW7DXSm7FBUI_pl2HVoXtbSDwKRIgoKFtwFn4NkktEPGUhktqw8-X0DlD11QPZUYzeXnXwU1yGEb5dEPRLWsQHCuRO0m1y7PhAXXUDxP9HtVzADw=|1706549841|h4fLtLNjoWazLAaDswBQstfq4DkGdBoiBZdHHR-iJvU=",
			"type": "string"
		}
	]
}